from logger import log, log_error
from telebot.types import ReactionTypeEmoji
from helpers import get_arguments, get_next_matchday
from common import add_player_if_not_existant, validate_access, reply_only_CEO_can_do_it, validate_CEO_zone
import database
import constants
import re

def execute(message, bot):
    try:
        player = add_player_if_not_existant(message.from_user.first_name,
                                            message.from_user.last_name,
                                            message.from_user.username,
                                            message.from_user.id)
        bot.reply_to(message, "üõë –ü–æ–∫–∞ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–µ –¥—É—Ä–∏ –≥–∞–ª–∞–≤—ã.")
        '''if validate_access(message.chat.id, player, bot, message):
            command_and_argument_split = message.text.split('\n', 1)
            if len(command_and_argument_split)>1:
                parts = command_and_argument_split[1].split('\n')
                
                for line in parts:
                    lineup_player_params = re.split(r'[\s]+', line.strip())
                    first_name = lineup_player_params[0]
                    last_name = lineup_player_params[1]
                    lineup_player = database.find_player_by_name(first_name, last_name)
                    if lineup_player is not None:
                        player_id = lineup_player[7]
                        goals = lineup_player_params[2]
                        assists = lineup_player_params[3]
                        own_goals = lineup_player_params[4]
                        game_id = database.get_game_id()
                        #database.add_game_stats(player_id,game_id,goals,assists,own_goals)
                        #database.update_player_squad_for_matchday(squad_player_id, squad, get_next_matchday())
                    else:
                        log(f"Can't find player to register in a lineup: {lineup_player_params}")
                log(f"Game stats successfully registered")
                bot.reply_to(message, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤–Ω–µ—Å–µ–Ω!")
                bot.set_message_reaction(message.chat.id,
                                    message.message_id,
                                    [ReactionTypeEmoji('‚úçÔ∏è')],
                                    is_big=True)
            else:
                bot.reply_to(message, "–ü—Ä–∏—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–∂–∫–∏! –¢—ã –∂ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª. –ó–Ω–∞–µ—à—å –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å? –°–∞–º —Ä–∞–∑–±–µ—Ä–∏—Å—å.")'''
    except Exception as e:
        bot.reply_to(message, constants.UNHANDLED_EXCEPTION_MESSAGE)
        log_error(e)

        
        '''
/register_game_stats
–í–∞–Ω—è –®–º–∞—Ä–ª–æ–≤—Å–∫–∏–π 4 5 0
–ö–æ—Å—Ç—è –í–µ–¥—å–≥—É–Ω 3 2 0
–Æ—Ä–∞ –õ—É–ø–∏–Ω–æ–≤ 0 8 1
–°–µ—Ä–≥–µ–π –õ–∏—Å–æ–≤—Å–∫–∏–π 4 9 0
–û–ª–µ–≥ –ú–∞–ª–∞—Ö–æ–≤ 3 2 0
–°–µ—Ä–≥–µ–π –ú—à–∞—Ä 4 6 1
–†–æ–º–∞ –ú–∞—Ö–Ω—ã—Ç–∫–∏–Ω 14 4 0
–õ–µ—à–∞ –Æ—Ä—á–µ–Ω–∫–æ 3 4 0
–î–∏–º–∞ –®–∏–ª—å–∫–æ1 1 0
–î–∏–º–∞ –ü—Ä–∏—Å—Ç–∞–≤–Ω–µ–≤ 4 2 0
–û–ª–µ–≥ –ë—É–¥–µ–≤–∏—á 2 4 0
–ü–∞—à–∞ –ë–∞–∫—É–Ω–æ–≤–∏—á 4 3 0
'''