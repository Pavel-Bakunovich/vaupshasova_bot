from logger import log, log_error
from telebot.types import ReactionTypeEmoji
from helpers import get_arguments, get_next_matchday
from common import add_player_if_not_existant, validate_access_no_game_registration_needed, get_player_name_formal, reply_only_CEO_can_do_it, validate_CEO_zone
import database
import constants
import re
import datetime

def execute(message, bot):
    try:
        bot.set_message_reaction(message.chat.id,
                                            message.message_id,
                                            [ReactionTypeEmoji('üëæ')],
                                            is_big=True)
        current_player = add_player_if_not_existant(message.from_user.first_name,
                                            message.from_user.last_name,
                                            message.from_user.username,
                                            message.from_user.id)
        if validate_access_no_game_registration_needed(message.chat.id, current_player, bot, message):
            command_and_argument_split = message.text.split('\n', 1)
            if len(command_and_argument_split)>1:
                date_params = command_and_argument_split[0].split(' ', 1)
                if len(date_params) > 1:
                    date = None
                    try:
                        date = datetime.datetime.strptime(date_params[1], "%b %d, %Y")
                    except:
                        bot.reply_to(message, "–° –¥–∞—Ç–æ–π —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–∏—à–∏: /register_game_stats May 17, 2025")
                    if date is not None:
                        parts = command_and_argument_split[1].split('\n')
                        game_id = database.get_game_id_without_adding_new(date)
                        if game_id is not None:
                            corn_scored_goals_counter = 0
                            tomato_scored_goals_counter = 0
                            squad = database.get_squad(date)
                            for line in parts:
                                lineup_player_params = re.split(r'[\s]+', line.strip())
                                first_name = lineup_player_params[0]
                                last_name = lineup_player_params[1]
                                lineup_player = database.find_player_by_name(first_name, last_name)
                                is_data_valid = False
                                if lineup_player is not None:
                                    player_id = lineup_player[7]
                                    try:
                                        goals = lineup_player_params[2]
                                        assists = lineup_player_params[3]
                                        own_goals = lineup_player_params[4]
                                        is_data_valid = True
                                    except:
                                        bot.reply_to(message, f"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –≥–æ–ª–∞–º/–∞—Å–∏—Å—Ç–∞–º/–∞–≤—Ç–æ–≥–æ–ª–∞–º –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {first_name} {last_name}. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç—ã –Ω–µ –≤–≤–µ–ª –≤—Å–µ —Ü–∏—Ñ—Ä—ã. –ù–∞–ø—Ä–æ—Ç–∏–≤ –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å 3 —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é - <–≥–æ–ª—ã> <–∞—Å–∏—Å—Ç—ã> <–∞–≤—Ç–æ–≥–æ–ª—ã>. –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤—å —Ç–∞–º —á—Ç–æ-–Ω–∏–±—É–¥—å –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∏–≤–∞–π –∫–æ–º–∞–Ω–¥—É.")
                                    
                                    if is_data_valid is True:
                                        if goals.isdigit() is False or assists.isdigit() is False or own_goals.isdigit() is False:
                                            bot.reply_to(message, f"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –≥–æ–ª–∞–º/–∞—Å–∏—Å—Ç–∞–º/–∞–≤—Ç–æ–≥–æ–ª–∞–º –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {first_name} {last_name}. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç—ã –≤–≤–µ–ª –Ω–µ —Ü–∏—Ñ—Ä—É, –∞ —Ç–µ–∫—Å—Ç –∫–∞–∫–æ–π-—Ç–æ. –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤—å —Ç–∞–º —á—Ç–æ-–Ω–∏–±—É–¥—å –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∏–≤–∞–π –∫–æ–º–∞–Ω–¥—É.")
                                        else:
                                            database.add_game_stats(player_id,game_id,goals,assists,own_goals)
                                            if get_player_team(player_id, squad) == constants.SQUAD_CORN:
                                                corn_scored_goals_counter += int(goals)
                                                if int(own_goals) > 0:
                                                    tomato_scored_goals_counter += int(own_goals)
                                            else:
                                                tomato_scored_goals_counter += int(goals)
                                                if int(own_goals) > 0:
                                                    corn_scored_goals_counter += int(own_goals)
                                else:
                                    bot.reply_to(message, f"–í–æ—Ç —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ: {first_name} {last_name}. –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤—å —Ç–∞–º —á—Ç–æ-–Ω–∏–±—É–¥—å –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∏–≤–∞–π –∫–æ–º–∞–Ω–¥—É.")
                                    log(f"Can't find player to register in a lineup: {lineup_player_params}")
                            database.register_game_score(game_id,corn_scored_goals_counter,tomato_scored_goals_counter)
                            log(f"/register_game_stats requested by: {get_player_name_formal(current_player)}")
                            bot.reply_to(message, f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞! –¶–∏—Ñ—Ä—ã –º—É—Ç—è—Ç—Å—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è! –ö—Ä–∞—Å–∞–≤–∞!\n–°—á–µ—Ç –º–∞—Ç—á–∞ üåΩ {corn_scored_goals_counter}:{tomato_scored_goals_counter} üçÖ")
                            bot.set_message_reaction(message.chat.id,
                                                message.message_id,
                                                [ReactionTypeEmoji('‚úçÔ∏è')],
                                                is_big=True)
                        else:
                            bot.reply_to(message, "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ —Ç–∞–∫–æ–π –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å. –ú–æ–∂–µ—Ç, –¥–∞—Ç—É –∫–∞–∫—É—é-—Ç–æ –Ω–µ —Ç—É —É–∫–∞–∑–∞–ª? –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ-–ª—é–±–æ–º—É —Å—É–±–±–æ—Ç–∞. –ò –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º.")
                else:
                    bot.reply_to(message, "–î–∞—Ç—É –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å! –ë–µ–∑ –¥–∞—Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è. –û—Ç–∫—É–¥–∞ –∂ —è –∑–Ω–∞—é –∑–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —ç—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å? –í–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–∏—à–∏: /register_game_stats May 17, 2025")
            else:
                bot.reply_to(message, "–ü—Ä–∏—à–ª–∏ –≥–æ–ª—ã/–∞—Å–∏—Å—Ç—ã/–∞–≤—Ç–æ–≥–æ–ª—ã! –¢—ã –∂ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª. –ó–Ω–∞–µ—à—å –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å? –°–∞–º —Ä–∞–∑–±–µ—Ä–∏—Å—å!")
    except Exception as e:
        bot.reply_to(message, constants.UNHANDLED_EXCEPTION_MESSAGE)
        log_error(e)

def get_player_team(player_id, squad):
    for item in squad:
        if item[0] == player_id:
            return item[10]



'''
/register_game_stats May 17, 2025
–í–∞–Ω—è –®–º–∞—Ä–ª–æ–≤—Å–∫–∏–π 4 5 0
–ö–æ—Å—Ç—è –í–µ–¥—å–≥—É–Ω 3 2 0
–Æ—Ä–∞ –õ—É–ø–∏–Ω–æ–≤ 0 8 1
–°–µ—Ä–≥–µ–π –õ–∏—Å–æ–≤—Å–∫–∏–π 4 9 0
–û–ª–µ–≥ –ú–∞–ª–∞—Ö–æ–≤ 3 2 0
–°–µ—Ä–≥–µ–π –ú—à–∞—Ä 4 6 1
–†–æ–º–∞ –ú–∞—Ö–Ω—ã—Ç–∫–∏–Ω 14 4 0
–õ–µ—à–∞ –Æ—Ä—á–µ–Ω–∫–æ 3 4 0
–î–∏–º–∞ –®–∏–ª—å–∫–æ1 1 0
–î–∏–º–∞ –ü—Ä–∏—Å—Ç–∞–≤–Ω–µ–≤ 4 2 0
–û–ª–µ–≥ –ë—É–¥–µ–≤–∏—á 2 4 0
–ü–∞—à–∞ –ë–∞–∫—É–Ω–æ–≤–∏—á 4 3 0
'''
