from logger import log, log_error
from telebot.types import ReactionTypeEmoji
from helpers import get_arguments, get_next_matchday, get_next_matchday_formatted, get_today_minsk_time
from common import add_player_if_not_existant, validate_access_no_game_registration_needed, text_to_image, get_player_name_extended, reply_only_CEO_can_do_it, validate_CEO_zone
import database
import constants
import prettytable as pt
import datetime

def execute(message, bot):
    try:
        current_player = add_player_if_not_existant(message.from_user.first_name,
                                            message.from_user.last_name,
                                            message.from_user.username,
                                            message.from_user.id)
        if validate_access_no_game_registration_needed(message.chat.id, current_player, bot, message):
            command_and_argument_split = message.text.split('\n', 1)
            if len(command_and_argument_split)>1:
                date_params = command_and_argument_split[0].split(' ', 1)
                if len(date_params) > 1:
                    date = None
                    try:
                        date = datetime.datetime.strptime(date_params[1], "%b %d, %Y")
                    except:
                        bot.reply_to(message, "–° –¥–∞—Ç–æ–π —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–∏—à–∏: /register_score May 17, 2025...")
                    if date is not None:
                        score_params = command_and_argument_split[1].split(':',1)
                        score_corn = score_params[0]
                        score_tomato = score_params[1]
                        game_id = database.get_game_id_without_adding_new(date)
                        
                        if game_id is not None:
                            if score_corn.isdigit() is False or score_tomato.isdigit() is False:
                                bot.reply_to(message, f"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Å —Ü–∏—Ñ—Ä–∞–º–∏. –í–≤–µ–¥–∏ —Ç—ã —É–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –í–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞–¥–æ: <üåΩ>:<üçÖ>")
                            else:
                                database.register_game_score(game_id, score_corn, score_tomato)
                        else:
                            bot.reply_to(message, "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤ –±–∞–∑–µ —Ç–∞–∫–æ–π –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å. –ú–æ–∂–µ—Ç, –¥–∞—Ç—É –∫–∞–∫—É—é-—Ç–æ –Ω–µ —Ç—É —É–∫–∞–∑–∞–ª? –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ-–ª—é–±–æ–º—É —Å—É–±–±–æ—Ç–∞. –ò –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º.")
                
                        log(f"Game score successfully registered: üåΩ {score_corn}:{score_tomato} üçÖ")
                        bot.reply_to(message, f"‚úÖ –°—á–µ—Ç –∑–∞–ø–∏—Å–∞–ª. üåΩ {score_corn}:{score_tomato} üçÖ")
                        bot.set_message_reaction(message.chat.id,
                                            message.message_id,
                                            [ReactionTypeEmoji('‚úçÔ∏è')],
                                    is_big=True)
            else:
                bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –£–∫–∞–∂–∏ –¥–∞—Ç—É, –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å—á–µ—Ç –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ <üåΩ>:<üçÖ>")
    except Exception as e:
        bot.reply_to(message, constants.UNHANDLED_EXCEPTION_MESSAGE)
        log_error(e)
        